//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Sonic.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Linq;
using FoodTrade.Entity;
using FoodTrade.DAL;

namespace FoodTrade.BLL.Component
{
	public partial class SupplierBLL
	{
		public void Create(SupplierEntity item)
		{
			using (var context = new DatabaseContext())
			{
				var e = new Supplier();
				e.Name = item.Name;
				e.Address = item.Address;
				e.Email = item.Email;
				e.Contact = item.Contact;
				e.Status = item.Status;
				e.CreatedBy = item.CreatedBy;
				e.CreatedDate = item.CreatedDate;
				e.ModifiedBy = item.ModifiedBy;
				e.ModifiedDate = item.ModifiedDate;
				context.Suppliers.Add(e);
				context.SaveChanges();

				item.ID = e.ID;
			}
		}

		public void Update(SupplierEntity item)
		{
			using (var context = new DatabaseContext())
			{
				var e = context.Suppliers.SingleOrDefault(o => o.ID == item.ID);

				if (e != null)
				{
					e.Name = item.Name;
					e.Address = item.Address;
					e.Email = item.Email;
					e.Contact = item.Contact;
					e.Status = item.Status;
					e.CreatedBy = item.CreatedBy;
					e.CreatedDate = item.CreatedDate;
					e.ModifiedBy = item.ModifiedBy;
					e.ModifiedDate = item.ModifiedDate;
					context.SaveChanges();
				}
			}
		}

		public void Delete(int id)
		{
			using (var context = new DatabaseContext())
			{
				var e = context.Suppliers.SingleOrDefault(o => o.ID == id);

				if (e != null)
				{
					context.Suppliers.Remove(e);
					context.SaveChanges();
				}
			}
		}

		public SupplierEntity Get(int id)
		{
			using (var context = new DatabaseContext())
			{
				var item = context.Suppliers.SingleOrDefault(o => o.ID == id);

				if (item != null)
				{
					return MapFields(item);
				}

				return null;
			}
		}

		public List<SupplierEntity> GetAll()
		{
			using (var context = new DatabaseContext())
			{
				var items = context.Suppliers.Where(o => 1 == 1);
				var models = new List<SupplierEntity>();

				foreach (var item in items)
				{
					models.Add(MapFields(item));
				}

				return models;
			}
		}

		public static SupplierEntity MapFields(Supplier item)
		{
			return new SupplierEntity
			{
				ID = item.ID,
				Name = item.Name,
				Address = item.Address,
				Email = item.Email,
				Contact = item.Contact,
				Status = item.Status,
				CreatedBy = item.CreatedBy,
				CreatedDate = item.CreatedDate,
				ModifiedBy = item.ModifiedBy,
				ModifiedDate = item.ModifiedDate
			};
		}

	}
}
