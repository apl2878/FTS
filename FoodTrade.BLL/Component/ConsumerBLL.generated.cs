//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Sonic.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Linq;
using FoodTrade.Entity;
using FoodTrade.DAL;

namespace FoodTrade.BLL.Component
{
	public partial class ConsumerBLL
	{
		public void Create(ConsumerEntity item)
		{
			using (var context = new DatabaseContext())
			{
				var e = new Consumer();
				e.FirstName = item.FirstName;
				e.LastName = item.LastName;
				e.Team = item.Team;
				e.Email = item.Email;
				e.Contact = item.Contact;
				e.Status = item.Status;
				e.CreatedBy = item.CreatedBy;
				e.CreatedDate = item.CreatedDate;
				e.ModifiedBy = item.ModifiedBy;
				e.ModifiedDate = item.ModifiedDate;
				context.Consumers.Add(e);
				context.SaveChanges();

				item.ID = e.ID;
			}
		}

		public void Update(ConsumerEntity item)
		{
			using (var context = new DatabaseContext())
			{
				var e = context.Consumers.SingleOrDefault(o => o.ID == item.ID);

				if (e != null)
				{
					e.FirstName = item.FirstName;
					e.LastName = item.LastName;
					e.Team = item.Team;
					e.Email = item.Email;
					e.Contact = item.Contact;
					e.Status = item.Status;
					e.CreatedBy = item.CreatedBy;
					e.CreatedDate = item.CreatedDate;
					e.ModifiedBy = item.ModifiedBy;
					e.ModifiedDate = item.ModifiedDate;
					context.SaveChanges();
				}
			}
		}

		public void Delete(int id)
		{
			using (var context = new DatabaseContext())
			{
				var e = context.Consumers.SingleOrDefault(o => o.ID == id);

				if (e != null)
				{
					context.Consumers.Remove(e);
					context.SaveChanges();
				}
			}
		}

		public ConsumerEntity Get(int id)
		{
			using (var context = new DatabaseContext())
			{
				var item = context.Consumers.SingleOrDefault(o => o.ID == id);

				if (item != null)
				{
					return MapFields(item);
				}

				return null;
			}
		}

		public List<ConsumerEntity> GetAll()
		{
			using (var context = new DatabaseContext())
			{
				var items = context.Consumers.Where(o => 1 == 1);
				var models = new List<ConsumerEntity>();

				foreach (var item in items)
				{
					models.Add(MapFields(item));
				}

				return models;
			}
		}

		public static ConsumerEntity MapFields(Consumer item)
		{
			return new ConsumerEntity
			{
				ID = item.ID,
				FirstName = item.FirstName,
				LastName = item.LastName,
				Team = item.Team,
				Email = item.Email,
				Contact = item.Contact,
				Status = item.Status,
				CreatedBy = item.CreatedBy,
				CreatedDate = item.CreatedDate,
				ModifiedBy = item.ModifiedBy,
				ModifiedDate = item.ModifiedDate
			};
		}

	}
}
